Concurrency Patterns
26 May 2015
Tags: Go, Golang, Programming Languages, Concurrency

Aaron Schlesinger
Sr. Engineer, Iron.io
aaron@iron.io
http://github.com/arschles
@arschles

* About me

- Database & backend systems engineer at Iron.io
- Writing Go for ~2 yrs, JVM for a while during/before that
- Distributed systems at Zynga, StackMob, PayPal, now Iron.io
- C -> C++ -> Python/PHP -> Java -> Scala -> Go

* "It's almost too easy to write concurrency bugs in Go"

Because Go has powerful concurrency primitives.

I'm discussing today how to use them responsibly.

* Today

Conventions & patterns for:

- `sync.Mutex`, `chan` and `sync.WaitGroup`
- [[http://blog.golang.org/go-concurrency-patterns-timing-out-and][Timeouts]], cancellation and [[http://godoc.org/golang.org/x/net/context][net.Context]]
- For-select loops

* Something old

Locks have a time and a place. We found a few at Iron.io (building a distributed DB).

If you use locks:

.image maintainer-serial-killer.jpg

But prefer sharing memory by communicating.

* Go-specific conventions

- `defer` unlocking wherever possible
- Document ownership in your *public* interface
- Abstract mutual exclusion if it crosses an exported `func`

Worth paying attention to conventions from other communities (e.g. lock acquisition order).

* Documenting Mutual Exclusion

.code request_ids.go

* Channels

 Share memory by communicating.

- Channels + goroutines are "easy" but powerful enough to build real systems
- They're built in for a reason. Use them by default
- When in doubt, ask why you _shouldn't_ use them to communicate between goroutines

* Conventions for Channels

- Document sends and receives across `func` boundaries: who and how?
- Enlist the compiler. Use directional channels
- Don't return a `chan` unless the `func` is a [[https://talks.golang.org/2012/concurrency.slide#25][generator]]
- `close` is a useful signal to callers. Use it and document it

* Example

.code channels.go

* On Documentation

- Documentation may establish contracts or invariants that code can't or won't
- Code should be as self-documenting as possible, but don't let Godoc be empty
- The remainder of this talk has mostly runnable code

* WaitGroup

If you're waiting for a `chan` to close or receive a `struct{}`, can you use a `sync.WaitGroup` instead?

Use these as:

- Notifiers for one-time events
- Rendezvous points
- Helpers to write deterministic tests

* Notification of an event

.code wg_notification.go

* Revisiting fan-in

.image fan.jpg

(Taken from [[https://talks.golang.org/2012/concurrency.slide#28][https://talks.golang.org/2012/concurrency.slide#28]], credit Renée French)

* Why?

If you can do work concurrently, do it. There's no excuse not to.

How I'm defining fan-in:

- A code pattern to gather results from 2 or more goroutines
- An algorithm to follow for converting sequential code to concurrent

* Details

- Read about it under "Fan-out, fan-in" section at [[https://blog.golang.org/pipelines][https://blog.golang.org/pipelines]]
- `sync.WaitGroup` and a few channels make fan-in simple & understandable
- In many cases, you can get an easy latency win without changing an exported `func`

* Sequential datastore queries

.play sequential_datastore.go /^func GetAll/,/^}/

* Concurrent datastore queries

.play concurrent_datastore.go /^func GetAll/,/^}/

* Production issues

Specifically, issues in long-running systems.

- They will happen
- Test for them
- Even if you can't, be proactive and try to fail gracefully

* Timeouts

Your system shouldn't grind to a halt on channel sends.

.image deadlock.png

Select on the channel and a timer. Or, do better...

* Use net.Context

[[https://blog.golang.org/context][`net.Context`]] has a nice interface in front of timers.

- I'm cheating here. I said everything would be done with the standard library
- Contexts are more than a timer. They provide a nice interface with some extras
- You could build and test your own context in a few hours, from the stdlib
- That's my excuse

* Context interface

With (excellent) comments taken out for brevity.

.code context-bare.go

(Copyright (c) 2009 The Go Authors. All rights reserved. Please see [[https://github.com/golang/net/blob/master/LICENSE][the full license]] for more.)

* Using contexts

- They add cancellation
- They build a tree of control

`net.Context` is a good universal tool for timeouts/cancellation in a large codebase.

* Contexts in a distributed system

The Tail at Scale.

- Jeff Dean talk/paper. I originally saw it at a [[https://www.youtube.com/watch?v=C_PxVdQmfpk][Ricon 2013 Talk]]
- Hedged requests: do a few identical GET (e.g. no side effects) requests, cancel remaining requests after first returns

Rob showed a variant in [[https://talks.golang.org/2012/concurrency.slide#50][https://talks.golang.org/2012/concurrency.slide#50]]

* Adding cancellation

.play tail_at_scale.go /^func main/,/^}/

* That was the naïve implementation

But, it's not too hard to get "fancy"

- Don't send 2nd request until 1st is past 95th percentile expected latency (2 contexts - one cancel)
- Cancel in-flight requests (pass context to RPC subsystem)
- Target-target communication (pass info on other in-flight requests over RPC)

* Putting it all together

For-select loops put together almost all of the concepts in here.

Possible applications:

- Event loops
- GC
- Sequential state mutation (like an actor)

* For-select loop mechanics

- Run a (possibly infinite) loop in a goroutine
- Generally select on 2+ channels in each iteration
- Sometimes pass long running operations to other goroutines

* Patterns

- Ack before and after real work is done. testing is easier and rate limiting/backpressure is easy
- If you're ticking, wrap `time.Ticker` to add ack
- `net.Context` for cancellation
- `sync.WaitGroup` for started and stopped

* A for-select poller

.code enhanced_poller.go /^func poll/,/^}/

* Driving the poller

.play enhanced_poller.go /^func main/,/^}/

* Notes

- The poller is missing the ack
- We have a small utility at Iron.io to add acks to `time.Ticker` and `time.Timer`
- Exercise left to the reader

* Conclusion

Go has really good built in concurrency primitives.

I believe we (the community) are starting to build good patterns & tools to _responsibly_ build on them.

* If you take one thing away

Use `net.Context` in your codebase.

Or, at least try it.

It's simple and powerful, and follows the "Go way."

* If you take two things away

Add reading and understanding [[https://talks.golang.org/2012/concurrency.slide][Go Concurrency Patterns]].
