Go
Where it's going and why you should pay attention
14 May 2015
Tags: Go, Golang, Programming Languages, Distributed Systems

Aaron Schlesinger
Sr. Engineer, Iron.io
arschles@gmail.com
http://github.com/arschles
http://iron.io
@arschles

* About Me

- Currently a database & backend systems engineer at Iron.io
- Writing Go for 1.5 years
- Worked on server side and distributed systems for 5 years
- Go is my favorite language. I'm most productive and happiest here

* Today

- Why Go is powerful
- Why it's important
- Why it's worth your attention

* About Go

A programming language that started at Google. From [[http://golang.org][golang.org]]:

  Go is an open source programming language that makes it easy to build simple,
  reliable, and efficient software.

Very good choice for:

- Cloud & microservices
- Web servers
- Systems utilities
- Databases
- Monitoring tools

* Why Go?

- Efficient runtime
- Simple & powerful primitives
- Extremely productive
- Great tools
- Fun

* Simple program

.play simple_example.go

* Simple (concurrent) program

.play concurrency_example.go

* Concurrency

It's built into the language. I believe this is the #1 most powerful feature of Go.

- You define concurrent units of execution inside *goroutines* (concurrently executing functions)
- Goroutines can communicate & synchronize using *channels*
- You write your programs as if they do blocking I/O
- Applications use *all* cores

* Concurrency details

- Goroutines have dynamically sized stacks
- Runtime multiplexes your Goroutines onto threads
- Runtime automatically context switches for you on I/O, etc...

* The current state of Go

Real Go programs are in production at Google, Square, The New York Times, Github, Digital Ocean, Iron.io and many more.

- Active & growing community
- Core team focuses mostly on perf & tools
- Very few new lang features
- "The Go Way"

* My predictions

- Go's usage will steadily grow
- More high profile open source projects will be written in Go
- Go will be the best language for cloud computing environments
- Go will be the default stack for many new software businesses

Other programing languages will need to _improve_ to:

- Keep pace with growing cloud computing requirements
- Compete with Go

* Evidence

I will present evidence for the following:

- Why Go's adoption will grow
- Why Go is the right choice for large scale applications today

* Adoption

Why the Go developer base will grow.

* 1. Buzz

Before a programmer chooses Go, he/she will probably  hear about it primarily via blog posts, articles or word-of-mouth (conferences, meetups, friends).

Many developers of all experience levels are writing and reading about Go today.

* 1.1. Example

Travis Reeder, co-founder of Iron.io posted about his experience replacing existing software with Go.

.link http://blog.iron.io/2013/03/how-we-went-from-30-servers-to-2-go.html

To date, it is one of Iron's most popular blog posts. It generated a large discussion on Hacker News.

.link https://news.ycombinator.com/item?id=5365096

Similarly, there is significant, growing interest (and debate) around Go in the community at large.

* 2. First line of code

Anybody can _try_ Go by going to [[http://play.golang.org][play.golang.org]].

There are no other requisite steps to execute Go code.

* 3. Installing Go

Setup for non-trivial development requires the following steps:

- Create and setup your GOPATH
- Download the go binary to your executable path

This process is by far the simplest I have encountered across any language. Go makes an excellent first impression.

* 4. Toolchain

The toolchain is encapsulated in a single binary. That binary contains all of the tools a first time Go programmer will need to start building and running programs.

It scales to large codebases too. I generally use only 1 additional tool in my everyday development.

* 5. Dev/test workflow

The language and compiler were designed to compile code quickly and they deliver.

- Fast compilation enables an efficient local edit/test workflow
- Fast compilation enables significant developer efficiency advantages
- Additionally, build/test/deploy pipelines can complete their tasks significantly faster

* 6. Everyday development

Go enables developers to write better code faster.

- The language is simple (25 keywords) but powerful. Developers focus more on semantics, less on syntax
- Documentation is accessible, centralized and well organized. See [[http://godoc.org][godoc.org]]
- Industrial grade static checking is built into the standard toolchain
- Go programs are statically linked. Developers run their programs locally with no external dependencies

* 7. Extensibility

The Go toolchain's feature set will grow primarily because the language is so simple and powerful.

For example:

There's a Go parser built into the standard library. Developers in the community have used this feature to quickly build high quality code generation tools, new static checkers, etc...

* 8. Packaging

Go includes a simple packaging scheme:

- The toolchain installs a dependency by downloading the code and compiling it into your program
- Packages can be hosted on major source code repositories or any server that follows a simple HTTP request protocol

Go packaging is criticized a lot. The community has built many tools to make it more robust, but its simplicity enables an extremely low friction release process.

* Suitability for cloud & microservices environments

Why Go is here to stay.

* 1. Deployment

The following key features make Go programs very easy to deploy in multiple scenarios

- The Go compiler statically links its output binaries
- Go binaries require no runtime/interpreter on the target. All necessary runtime components are compiled into the binary
- The Go toolchain can cross compile programs. A developer on a Mac OS X machine can compile for a Linux target platform, for example

* 1.1. Deploying a web application

Statically linked binaries with no external dependencies (except libc if linux target) are much easier to deploy than dynamically linked binaries or JVM applications.

Engineers won't choose Go for this feature, but they appreciate it after they do.

* 1.2. Deploying a CLI application

Some developers are beginning to use Go for CLI applications as well. Cross compiling and static linking are both extremely important in this scenario.

Go allows CLI developers to ship a single binary without writing detailed install instructions or worrying about dependencies on the user's machine.

* 2. Concurrency & I/O

Modern web and CLI applications alike often need to do complex I/O.

Web apps, for example, often need to interact with multiple 3rd party APIs which may fail independently.

Go has concurrency & I/O features that enable robust applications:

- Runtime-managed goroutines
- Built in, typed _channels_ for cross-goroutine communication and synchronization
- _select_ statements for doing complex operations on multiple goroutines
- ability to timeout on a channel send or recv
- automatic context switching on I/O syscalls
- make it work, make it right, make it fast

* 2.1. Concurrency example - access a shared external resource

.play resource_pool.go

* 2.2. Concurrency example - timeout

.play concurrency_timeout.go

* 2.3. That was just a single I/O

Didn't cover

- Concurrent CPU utilization
- (De)multiplexing I/O
- Fan-in / fan-out & pipelines
- Long Tail Patterns (e.g. first one wins)
- ...

* In summary

- Go is a new, exciting and growing language
- It's very mature for its age
- Today it's being adopted primarily in systems niches
- It will expand to be the de facto standard for web scale applications

* Challenge to new Gophers

- Go to [[http://bit.ly/1B09b3F][http://bit.ly/1Et4O7x]]
- Write your solution at [[http://play.golang.org][play.golang.org]]
- Click "Share" at the top and send the link to *arschles@gmail.com*
- I will respond with feedback and we can discuss

* Existing Gophers

Send me a code snippet (*arschles@gmail.com*) of the most complex concurrent Go code you've seen.

I want to discuss how you'd make it better.

* Companies using Go

- [[http://iron.io/][Iron.io]]
- [[https://coreos.com/][CoreOS]]
- [[http://influxdb.com/][InfluxDB]]
- [[https://www.docker.com/][Docker]]
- [[https://hashicorp.com/][Hashicorp]]
- [[http://walmartlabs.com][Walmart Labs]]
- [[http://cloudflare.com][Cloudflare]]
- [[http://google.com][Google]] (of course)

* Major open source projects written in Go

- [[https://github.com/bitly/nsq][NSQ]]
- [[https://github.com/GoogleCloudPlatform/kubernetes][Kubernetes]]
- [[https://github.com/hashicorp/terraform][Terraform]]
- [[https://github.com/mitchellh/packer][Packer]]
- [[https://github.com/docker/docker][Docker]]
- [[https://github.com/mailgun/vulcand][Vulcand]]
